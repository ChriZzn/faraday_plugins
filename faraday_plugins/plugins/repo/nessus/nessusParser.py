import xml.etree.ElementTree as ET

from faraday_plugins.plugins.repo.nessus.DTO import Report


class NessusParser:
    """
    The objective of this class is to parse an xml file generated by the nessus tool.

    TODO: Handle errors.
    TODO: Test nessus output version. Handle what happens if the parser doesn't support it.
    TODO: Test cases.

    @param nessus_filepath A proper simple report generated by nessus
    """

    def __init__(self, output):
        self.tree = ET.fromstring(output)
        self.report = []
        if self.tree:
            self.report = self.__get_report()

    def __get_report(self) -> Report:
        report = self.tree.find('Report')
        return Report(report) if report else None






# class

#
# class Report:
#     def __init__(self, report_node):
#         self.node = report_node
#
#
#
#         self.report_name = self.node.attrib.get('name')
#         self.report_host = self.node.find('ReportHost')
#         self.report_desc = []
#         self.report_ip = []
#         self.report_serv = [] self.node.find("HostProperties")
#         self.report_json = {}
#         if self.report_host is not None:
#             for x in self.node:
#                 report_host_ip = x.attrib.get('name')
#                 host_properties = self.gethosttag(x.find('HostProperties'))
#                 report_items = self.getreportitems(x.findall('ReportItem'))
#                 self.report_ip.append(report_host_ip)
#                 self.report_desc.append(host_properties)
#                 self.report_serv.append(report_items)
#                 self.report_json['ip'] = self.report_ip
#                 self.report_json['desc'] = self.report_desc
#                 self.report_json['serv'] = self.report_serv
#                 self.report_json['host_end'] = host_properties.get('HOST_END')
#         else:
#             self.report_host_ip = None
#             self.host_properties = None
#             self.report_items = None
#             self.report_json = None
#
#     def getreportitems(self, items):
#         report_items = []
#
#         for item in items:
#             port = item.attrib.get('port')
#             svc_name = item.attrib.get('svc_name')
#             protocol = item.attrib.get('protocol')
#             severity = item.attrib.get('severity')
#             plugin_id = item.attrib.get('pluginID')
#             plugin_name = item.attrib.get('pluginName')
#             plugin_family = item.attrib.get('pluginFamily')
#             if item.find('plugin_output') is not None:
#                 plugin_output = item.find('plugin_output').text
#             else:
#                 plugin_output = "Not Description"
#             if item.find('description') is not None:
#                 description = item.find('description').text
#             else:
#                 description = "Not Description"
#             info = self.getinfoitem(item)
#             report_items.append(ReportItem(*[port, svc_name, protocol, severity, plugin_id,
#                                              plugin_name, plugin_family, description, plugin_output, info]))
#         return report_items
#
#     @staticmethod
#     def getinfoitem(item):
#         item_tags = {}
#         for i in item:
#             item_tags.setdefault(i.tag, i.text)
#         return item_tags
#
#     @staticmethod
#     def gethosttag(tags):
#         host_tags = {}
#         for t in tags:
#             host_tags.setdefault(t.attrib.get('name'), t.text)
#         return host_tags
#
